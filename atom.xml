<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>挽留之王小石</title>
  <icon>https://www.gravatar.com/avatar/a23107e3958da4844989715e80058f71</icon>
  <subtitle>Hello,world!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.juphy.com/"/>
  <updated>2018-08-09T05:36:45.812Z</updated>
  <id>http://blog.juphy.com/</id>
  
  <author>
    <name>Juphy</name>
    <email>gaojuphy@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Angular组件通信</title>
    <link href="http://blog.juphy.com/2018/06/20/Angular%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/"/>
    <id>http://blog.juphy.com/2018/06/20/Angular组件通信/</id>
    <published>2018-06-20T06:56:00.000Z</published>
    <updated>2018-08-09T05:36:45.812Z</updated>
    
    <content type="html"><![CDATA[<h2 id="输入属性（父组件-gt-子组件）"><a href="#输入属性（父组件-gt-子组件）" class="headerlink" title="输入属性（父组件-&gt;子组件）"></a>输入属性（父组件-&gt;子组件）</h2><blockquote><p>@Input，自定义属性</p></blockquote><p>app.component.ts<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Component &#125; from &apos;@angular/core&apos;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: &apos;exe-app&apos;,</span><br><span class="line">  template: `</span><br><span class="line">   &lt;exe-counter [count]=&quot;initialCount&quot;&gt;&lt;/exe-counter&gt;</span><br><span class="line">  `</span><br><span class="line">&#125;)</span><br><span class="line">export class AppComponent &#123;</span><br><span class="line">  initialCount: number = 5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>counter.component.ts<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Component, Input &#125; from &apos;@angular/core&apos;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    selector: &apos;exe-counter&apos;,</span><br><span class="line">    template: `</span><br><span class="line">      &lt;p&gt;当前值: &#123;&#123; count &#125;&#125;&lt;/p&gt;</span><br><span class="line">      &lt;button (click)=&quot;increment()&quot;&gt; + &lt;/button&gt;</span><br><span class="line">      &lt;button (click)=&quot;decrement()&quot;&gt; - &lt;/button&gt;</span><br><span class="line">    `</span><br><span class="line">&#125;)</span><br><span class="line">export class CounterComponent &#123;</span><br><span class="line">    @Input() count: number = 0;</span><br><span class="line"></span><br><span class="line">    increment() &#123;</span><br><span class="line">        this.count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    decrement() &#123;</span><br><span class="line">        this.count--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="输出属性（子组件-gt-父组件）"><a href="#输出属性（子组件-gt-父组件）" class="headerlink" title="输出属性（子组件-&gt;父组件）"></a>输出属性（子组件-&gt;父组件）</h2><blockquote><p>@Output()，自定义事件</p></blockquote><p>app.component.ts<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Component &#125; from &apos;@angular/core&apos;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: &apos;exe-app&apos;,</span><br><span class="line">  template: `</span><br><span class="line">   &lt;p&gt;&#123;&#123;changeMsg&#125;&#125;&lt;/p&gt;</span><br><span class="line">   &lt;exe-counter [count]=&quot;initialCount&quot;</span><br><span class="line">    (change)=&quot;countChange($event)&quot;&gt;&lt;/exe-counter&gt;</span><br><span class="line">  `</span><br><span class="line">&#125;)</span><br><span class="line">export class AppComponent &#123;</span><br><span class="line">  initialCount: number = 5;</span><br><span class="line"></span><br><span class="line">  changeMsg: string;</span><br><span class="line"></span><br><span class="line">  countChange(event: number) &#123;</span><br><span class="line">    this.changeMsg = `子组件change事件已触发，当前值是: $&#123;event&#125;`;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 自定义事件change，接收发送过来的数据。</span><br></pre></td></tr></table></figure></p><p>counter.component.ts<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Component, Input, Output, EventEmitter &#125; from &apos;@angular/core&apos;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    selector: &apos;exe-counter&apos;,</span><br><span class="line">    template: `</span><br><span class="line">      &lt;p&gt;当前值: &#123;&#123; count &#125;&#125;&lt;/p&gt;</span><br><span class="line">      &lt;button (click)=&quot;increment()&quot;&gt; + &lt;/button&gt;</span><br><span class="line">      &lt;button (click)=&quot;decrement()&quot;&gt; - &lt;/button&gt;</span><br><span class="line">    `</span><br><span class="line">&#125;)</span><br><span class="line">export class CounterComponent &#123;</span><br><span class="line">    @Input() count: number = 0;</span><br><span class="line"></span><br><span class="line">    @Output() change: EventEmitter&lt;number&gt; = new EventEmitter&lt;number&gt;();</span><br><span class="line"></span><br><span class="line">    increment() &#123;</span><br><span class="line">        this.count++;</span><br><span class="line">        this.change.emit(this.count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    decrement() &#123;</span><br><span class="line">        this.count--;</span><br><span class="line">        this.change.emit(this.count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 当值改变时，通过事件发射数据接收。</span><br></pre></td></tr></table></figure></p><h2 id="双向绑定"><a href="#双向绑定" class="headerlink" title="双向绑定"></a>双向绑定</h2><blockquote><p>[()]，Angular的双向绑定</p></blockquote><p><em>通过修改绑定属性的方式，使用双向绑定即可，此时在子组件中只需要接收数据。</em></p><h2 id="模板变量"><a href="#模板变量" class="headerlink" title="模板变量"></a>模板变量</h2><blockquote><p>通过子组件标签的#name,则name就相当于子组件component。</p></blockquote><p>parent.component.ts<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import &#123;Component, OnInit&#125; from &apos;@angular/core&apos;;</span><br><span class="line">import &#123;ChildComponent&#125; from &apos;./child-component.ts&apos;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: &apos;parent-component&apos;,</span><br><span class="line">  template: `</span><br><span class="line">    &lt;child-component #child&gt;&lt;/child-component&gt;</span><br><span class="line">    &lt;button (click)=&quot;child.name = childName&quot;&gt;设置子组件名称&lt;/button&gt;</span><br><span class="line">  `</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export class ParentComponent implements OnInit &#123;</span><br><span class="line"></span><br><span class="line">  private childName: string;</span><br><span class="line"></span><br><span class="line">  constructor() &#123; &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit() &#123;</span><br><span class="line">    this.childName = &apos;child-component&apos;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>child.component.ts<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import &#123;Component&#125; from &apos;@angular/core&apos;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: &apos;child-component&apos;,</span><br><span class="line">  template: `I&apos;m &#123;&#123; name &#125;&#125;`</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export class ChildComponent &#123;</span><br><span class="line">  public name: string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h2><h3 id="在查询参数中传递参数"><a href="#在查询参数中传递参数" class="headerlink" title="在查询参数中传递参数"></a>在查询参数中传递参数</h3><p>传递参数页面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a [routerLink]=&quot;[&apos;/cinema-chain/cinema&apos;]&quot; [queryParams]=&quot;&#123;chain: 1&#125;&quot;&gt;查看影院&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>点击跳转时，/cinema-chain/cinema?chain=1（?chain=1就是从路由里面传递过来的参数）。</p><p>接收参数的页面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">constructor(private activatedRoute: ActivatedRoute) &#123;</span><br><span class="line">   const chain = this.activatedRoute.snapshot.queryParams[&apos;chain&apos;];</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><h3 id="在url路由路径中传递参数"><a href="#在url路由路径中传递参数" class="headerlink" title="在url路由路径中传递参数"></a>在url路由路径中传递参数</h3><p>在path中传递参数就需要先修改原有的路径使其可以携带参数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const routes: Routes = [</span><br><span class="line">  &#123;path: &apos;main/:type&apos;, loadChildren: &apos;./index/index.module#IndexModule&apos;&#125;,</span><br><span class="line">  &#123;path: &apos;upload&apos;, loadChildren: &apos;./components/upload/upload.module#UploadModule&apos;&#125;,</span><br><span class="line">  &#123;path: &apos;operation&apos;, loadChildren: &apos;./components/operation/operation.module#OperationModule&apos;&#125;,</span><br><span class="line">  &#123;path: &apos;compare/:type&apos;, loadChildren: &apos;./components/compare/compare.module#CompareModule&apos;&#125;,</span><br><span class="line">  &#123;path: &apos;**&apos;, component: PageNotFoundComponent&#125;,</span><br><span class="line">];</span><br><span class="line">整个路径被划分成两段变量</span><br></pre></td></tr></table></figure></p><p>传递参数页面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;a [routerLink]=&quot;[&apos;/home&apos;,2]&quot;&gt;主页&lt;/a&gt;</span><br><span class="line">这里的routerLink是一个数组，第一个值为路由的跳转路径，第二值为路由携带参数的值，这里传递的值为2</span><br><span class="line"></span><br><span class="line">或者这样传递</span><br><span class="line"> constructor(private router: Router) &#123;</span><br><span class="line">    this.router.navigate([&apos;/product&apos;,1]);</span><br><span class="line">    this.router.navigateByUrl(&apos;/product/1&apos;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>页面跳转的结果：/home/2</p><p>接收参数页面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">constructor(private activatedRoute: ActivatedRoute) &#123;</span><br><span class="line">   const chain = this.activatedRoute.snapshot.params[&apos;id&apos;];</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p><em>不能同时使用参数查询方式和路由路径Url 方式传递同一个页面的参数，否则报错。</em></p><h3 id="参数快照和参数订阅"><a href="#参数快照和参数订阅" class="headerlink" title="参数快照和参数订阅"></a>参数快照和参数订阅</h3><p>参数快照：获取路由中传递的参数的值得一个方法就用到了参数快照snapshot。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;a [routerLink]=&quot;[&apos;/home&apos;,2]&quot;&gt;主页&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">change_id()&#123;</span><br><span class="line">  this.router.navigate([&apos;/home&apos;,1]);</span><br><span class="line">&#125;</span><br><span class="line">路由路径中想home同时传递了两个参数，1和2</span><br></pre></td></tr></table></figure></p><p>当在页面第一次加载的时候会创建一次home，将2这个值传入页面，当点击按钮出发change_id事件的时候也会导航到home，但是在此之前主页已经被创建，并已经被赋值，此时导航到主页，主页并不会再次被创建，所以自然不会再次获取第二次导航过来的路由所携带的参数和值，但是路径变为了/home/1。</p><p>然而页面上的值仍然是2，获取当前路由所传递的参数值失败。这就是参数快照的弱点，为了解决这个问题引入了参数订阅：subscribe()。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">constructor(private activatedRoute: ActivatedRoute) &#123;</span><br><span class="line">   this.activatedRoute.params.subscribe(params =&gt; &#123;</span><br><span class="line">       const id = params[&apos;id&apos;];</span><br><span class="line">   &#125;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>采用参数订阅的方式subscribe()获取到一个类型为Params的属性params，并返回params里面的Id复制给本地变量homeID，这样就不会出现路径在变，但是页面里面的参数值不变的情况；</p><h2 id="ViewChild-装饰器"><a href="#ViewChild-装饰器" class="headerlink" title="@ViewChild 装饰器"></a>@ViewChild 装饰器</h2><blockquote><p>父组件获取子组件数据需要借助@ViewChild(),子组件直接引用。</p></blockquote><p>app.component.ts<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Component, ViewChild, AfterViewInit &#125; from &apos;@angular/core&apos;;</span><br><span class="line">import &#123; ChildComponent &#125; from &apos;./child.component&apos;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: &apos;my-app&apos;,</span><br><span class="line">  template: `</span><br><span class="line">    &lt;h4&gt;Welcome to Angular World&lt;/h4&gt;</span><br><span class="line">    &lt;exe-child&gt;&lt;/exe-child&gt;</span><br><span class="line">  `,</span><br><span class="line">&#125;)</span><br><span class="line">export class AppComponent &#123;</span><br><span class="line">  title: number = 123;</span><br><span class="line">  @ViewChild(ChildComponent)</span><br><span class="line">  childCmp: ChildComponent;</span><br><span class="line"></span><br><span class="line">  ngAfterViewInit() &#123;</span><br><span class="line">    this.childCmp.name = &apos;child-component&apos;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>child.component.ts<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Component, OnInit &#125; from &apos;@angular/core&apos;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    selector: &apos;exe-child&apos;,</span><br><span class="line">    template: `</span><br><span class="line">      &lt;p&gt;Child Component&lt;/p&gt;</span><br><span class="line">    `</span><br><span class="line">&#125;)</span><br><span class="line">export class ChildComponent &#123;</span><br><span class="line">    name: string = &apos;&apos;;</span><br><span class="line">    constructor(private appcomponent:AppComponent) &#123;</span><br><span class="line">        this.appcomponent.title</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="基于RxJS-Subject"><a href="#基于RxJS-Subject" class="headerlink" title="基于RxJS Subject"></a>基于RxJS Subject</h2><p>message.service.ts<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import &#123;Injectable&#125; from &apos;@angular/core&apos;;</span><br><span class="line">import &#123;of&#125; from &apos;rxjs/observable/of&apos;;</span><br><span class="line">import &#123;Subject&#125; from &apos;rxjs/Subject&apos;;</span><br><span class="line">import &#123;Observable&#125; from &apos;rxjs/Observable&apos;;</span><br><span class="line"></span><br><span class="line">@Injectable()</span><br><span class="line">export class MessageService &#123;</span><br><span class="line">  private subject = new Subject&lt;any&gt;();</span><br><span class="line">  message: any;</span><br><span class="line"></span><br><span class="line">  sendMessage(message: any) &#123;</span><br><span class="line">    this.message = message;</span><br><span class="line">    this.subject.next(message);</span><br><span class="line">    this.subject.complete();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  clearMessage() &#123;</span><br><span class="line">    this.message = null;</span><br><span class="line">    this.subject.next();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getMessage(): Observable&lt;any&gt; &#123;</span><br><span class="line">    // return this.subject.asObservable(); // 数据一直在维持，会产生变化</span><br><span class="line">    return of(this.message); // 数据值传递一次</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>home.component.ts<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Component &#125; from &apos;@angular/core&apos;;</span><br><span class="line">import &#123; MessageService &#125; from &apos;./message.service&apos;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    selector: &apos;exe-home&apos;,</span><br><span class="line">    template: `</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;Home&lt;/h1&gt;</span><br><span class="line">        &lt;button (click)=&quot;sendMessage()&quot;&gt;Send Message&lt;/button&gt;</span><br><span class="line">        &lt;button (click)=&quot;clearMessage()&quot;&gt;Clear Message&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;`</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export class HomeComponent &#123;</span><br><span class="line">    constructor(private messageService: MessageService) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    sendMessage(): void &#123;</span><br><span class="line">        this.messageService.sendMessage(&apos;Message from Home Component to App Component!&apos;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    clearMessage(): void &#123;</span><br><span class="line">        this.messageService.clearMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>app.component.ts<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Component, OnDestroy &#125; from &apos;@angular/core&apos;;</span><br><span class="line">import &#123; Subscription &#125; from &apos;rxjs/Subscription&apos;;</span><br><span class="line">import &#123; MessageService &#125; from &apos;./message.service&apos;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    selector: &apos;my-app&apos;,</span><br><span class="line">    template: `</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">       &lt;div *ngIf=&quot;message&quot;&gt;&#123;&#123;message.text&#125;&#125;&lt;/div&gt;</span><br><span class="line">       &lt;exe-home&gt;&lt;/exe-home&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    `</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export class AppComponent implements OnDestroy &#123;</span><br><span class="line">    message: any;</span><br><span class="line">    subscription: Subscription;</span><br><span class="line"></span><br><span class="line">    constructor(private messageService: MessageService) &#123;</span><br><span class="line">        this.subscription = this.messageService</span><br><span class="line">                                  .getMessage().subscribe( message =&gt; &#123;</span><br><span class="line">                                      this.message = message;</span><br><span class="line">                                 &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ngOnDestroy() &#123;</span><br><span class="line">        this.subscription.unsubscribe();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><em>更多<a href="https://github.com/RxJS-CN" target="_blank" rel="noopener">RxJS知识</a></em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;输入属性（父组件-gt-子组件）&quot;&gt;&lt;a href=&quot;#输入属性（父组件-gt-子组件）&quot; class=&quot;headerlink&quot; title=&quot;输入属性（父组件-&amp;gt;子组件）&quot;&gt;&lt;/a&gt;输入属性（父组件-&amp;gt;子组件）&lt;/h2&gt;&lt;blockquote&gt;
&lt;p
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.juphy.com/categories/JavaScript/"/>
    
    
      <category term="Angular" scheme="http://blog.juphy.com/tags/Angular/"/>
    
  </entry>
  
</feed>
